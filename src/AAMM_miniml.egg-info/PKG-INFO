Metadata-Version: 2.1
Name: AAMM_miniml
Version: 0.0.1
Summary: A small scikit-learn package
Author: Adnane AIT MAGOURT, Mahmoud MAFTAH
Project-URL: Homepage, https://github.com/adnanemagourt/AAMM_miniml
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE

# AAMM_miniml

AAMM_miniml is a minimalistic machine learning library providing implementations of various machine learning algorithms, including classification, regression, ensemble methods, decomposition techniques, and more.

## Table of Contents

- [Installation](#installation)
- [Usage](#usage)
- [Features](#features)
- [Datasets](#datasets)
- [Testing](#testing)
- [Contributing](#contributing)
- [License](#license)

## Installation

To use AAMM_miniml, clone the repository and install the necessary dependencies:

```bash
git clone https://github.com/adnanemagourt/AAMM_miniml.git
cd AAMM_miniml
pip install -r requirements.txt
```

## Usage

Below are some examples of how to use various components of the AAMM_miniml library:

### Classification

```python
from AAMM_miniml.tree.DecisionTreeClassifier import DecisionTreeClassifier
from AAMM_miniml.ensemble.RandomForestClassifier import RandomForestClassifier

# Example with DecisionTreeClassifier
dt = DecisionTreeClassifier()
dt.fit(X_train, y_train)
predictions = dt.predict(X_test)

# Example with RandomForestClassifier
rf = RandomForestClassifier()
rf.fit(X_train, y_train)
predictions = rf.predict(X_test)
```

### Regression

```python
from AAMM_miniml.tree.DecisionTreeRegressor import DecisionTreeRegressor
from AAMM_miniml.ensemble.RandomForestRegressor import RandomForestRegressor

# Example with DecisionTreeRegressor
dtr = DecisionTreeRegressor()
dtr.fit(X_train, y_train)
predictions = dtr.predict(X_test)

# Example with RandomForestRegressor
rfr = RandomForestRegressor()
rfr.fit(X_train, y_train)
predictions = rfr.predict(X_test)
```

### Decomposition

```python
from AAMM_miniml.decomposition.PCA import PCA

# Example with PCA
pca = PCA(n_components=2)
X_reduced = pca.fit_transform(X)
```

## Features

- **Classification**: Decision Tree, Random Forest, Support Vector Machines, Naive Bayes, etc.
- **Regression**: Decision Tree, Random Forest, Linear Regression, etc.
- **Ensemble Methods**: AdaBoost, Bagging, Gradient Boosting, Stacking, Voting, etc.
- **Decomposition**: PCA, LDA, t-SNE
- **Support for various datasets**: Includes sample datasets for quick testing.

## Datasets

The library includes sample datasets located in the `AAMM_miniml/datasets` directory:

- `adnane.csv`
- `mahmoud.csv`

These datasets can be used to test and demonstrate the functionality of the library.

## Testing

The library includes Jupyter notebooks for testing various modules, located in the `AAMM_miniml/_testing` directory:

- `test_adaboost.ipynb`
- `test_decomposition.ipynb`
- `test_ensemble.ipynb`
- `test_feature_extraction.ipynb`
- `test_feature_selection.ipynb`
- `test_impute.ipynb`
- `test_KNNClassifier.ipynb`
- `test_KNNRegressor.ipynb`
- `test_linear_model.ipynb`
- `test_metrics.ipynb`
- `test_model_selection.ipynb`
- `test_naive_bayes.ipynb`
- `test_neural_network.ipynb`
- `test_neural_network_BP.ipynb`
- `test_preprocessing.ipynb`
- `test_SLP.ipynb`
- `test_stacking.ipynb`
- `test_svm.ipynb`
- `test_tree.ipynb`

To run the tests, simply open the notebooks in Jupyter and execute the cells.

## Contributing

Contributions are welcome! If you have any suggestions or improvements, please create an issue or submit a pull request.

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
